"""
tuples_explanations.py

Ce script illustre comment Python g√®re les constantes et le bytecode
lors de la cr√©ation et du retour d‚Äôun tuple dans une fonction simple.

Fonctionnalit√©s :
- D√©finit une fonction `generate_tuple()` qui retourne un tuple `(1, 2, 3)`.
- Affiche les constantes (`co_consts`) utilis√©es dans cette fonction.
- Affiche le bytecode g√©n√©r√© par Python √† l‚Äôaide du module `dis`.

Objectif p√©dagogique :
Ce script est utile pour explorer la compilation en bytecode dans CPython,
et comprendre comment Python stocke les objets constants tels que les tuples.

Exemple de sortie :
    (None, (1, 2, 3))
      3           0 RESUME                   0
      4           2 LOAD_CONST               1 ((1, 2, 3))
                  4 STORE_FAST               0 (t)
      5           6 LOAD_FAST                0 (t)
                  8 RETURN_VALUE

Compatibilit√© :
- Python 3.11 ou sup√©rieur (instruction `RESUME` sp√©cifique √† ces versions)

Auteur : ali.zainoul.az@gmail.com
"""


import dis

def generate_tuple() -> tuple:
    """
    Cr√©e et retourne un tuple contenant trois entiers.
    
    Cette fonction sert d'exemple pour analyser le bytecode Python associ√©
    √† la cr√©ation et au retour d'un tuple simple. Elle permet d'observer 
    comment Python compile et ex√©cute une fonction simple.

    Returns:
        tuple: Un tuple contenant les valeurs (1, 2, 3).
    """
    t = (1, 2, 3)
    return t

# Affiche les constantes utilis√©es dans le bytecode de la fonction
print(generate_tuple.__code__.co_consts)

# D√©sassemble le bytecode de la fonction pour voir les instructions internes
dis.dis(generate_tuple)

# ‚Üí R√©sultat : (None, (1, 2, 3))
# Cela signifie que la fonction utilise deux constantes :
# - `None` (valeur de retour par d√©faut si aucun `return`)
# - le tuple `(1, 2, 3)` utilis√© dans la fonction

"""
(base) üíª ~/_COURSE_PYTHON_IB/scripts % python tuples_explanations.py
(None, (1, 2, 3))
  3           0 RESUME                   0

  4           2 LOAD_CONST               1 ((1, 2, 3))
              4 STORE_FAST               0 (t)

  5           6 LOAD_FAST                0 (t)
              8 RETURN_VALUE
"""


"""

D√©cryptage ligne par ligne :

Ligne	Instruction	        Description
0       RESUME      0	    Point de reprise, utilis√© dans la gestion des frames (Python 3.11+).	
2       LOAD_CONST  1	    Charge la constante (1, 2, 3) dans la pile.	
4       STORE_FAST  0 (t)	Stocke cette valeur dans la variable locale t.	
6       LOAD_FAST   0 (t)	Recharge t dans la pile (pr√©paration pour le retour).	
8       RETURN_VALUE	    Retourne la valeur au sommet de la pile, ici (1, 2, 3).	

üí° Remarques p√©dagogiques :

- Le __code__.co_consts r√©v√®le toutes les constantes utilis√©es dans la fonction compil√©e.
- Le bytecode est une repr√©sentation interm√©diaire de haut niveau compil√©e par CPython.

Ce genre d‚Äôanalyse est utile pour :

- Optimisation de performance
- Compr√©hension du fonctionnement interne de Python
- Debugging avanc√©

L‚Äôinstruction RESUME est sp√©cifique √† Python 3.11+. 
Elle est utilis√©e dans la nouvelle impl√©mentation de l‚Äô√©valuateur d‚Äôinstructions.
"""